
<div id="vis">

</div>
<style>

    .links line {
        stroke: #999;
        stroke-opacity: 0.6;
    }

    .nodes circle {
        stroke: #fff;
        fill-opacity: 0.8;
        stroke-width: 1.5px;
    }
    
    .nodes circle:hover {
        cursor:pointer;
        fill-opacity: 1.0;
    
    }

    text {
        font-family: sans-serif;
        font-size: 10px;
    }

</style>
<svg width="960" height="600"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var color = d3.scaleOrdinal(d3.schemeCategory20);

    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink()
        .id(function(d) { return d.id; }).distance(60).iterations(1))
        .force("charge", d3.forceManyBody().distanceMax(90).strength(-55))        
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("r",d3.forceRadial( function(d) { return d.id.length * 100 }));
    
      
    d3.json("graph.json", function (error, graph) {
        if (error) throw error;

        var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(graph.links)
            .enter().append("line")
            .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

        var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("g")
            .data(graph.nodes)
            .enter().append("g");

        var circles = node.append("circle")
            .attr("r", 5)
            .attr("fill", function (d) { return color(d.group); })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        var lables = node.append("text")
            .text(function (d) {
                return d.id;
            })
            .attr('x', 6)
            .attr('y', 3);

        node.append("title")
            .text(function (d) { return d.id; });

        simulation
            .nodes(graph.nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(graph.links);

        function ticked() {
            link
                .attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            node
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                })
        }
    });

    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }

</script>


@*<script>

        var width = 1920,
            height = 1080;

        var canvas = d3.select("#vis").append("canvas")
            .attr("width", width)
            .attr("height", height);

        var force = d3.layout.force()
            .size([width, height]);

        var nodeRadius = 4.5;

        d3.json("/Projects/Json1")
            .response(function (xhr) { return d3.csvParse(xhr.responseText); })
            .get(function(data) {
                console.log(data);
            });

        d3.json("graph.json", function (error, graph) {
            if (error) throw error;

            var context = canvas.node().getContext("2d");

            force
                .nodes(graph.nodes)
                .links(graph.links)
                .charge("-150")
                .linkStrength("10")
                .gravity("0.1")
                .on("tick", tick)
                .start();

            function tick() {
                context.clearRect(0, 0, width, height);

                // draw links
                context.strokeStyle = "#ccc";
                context.beginPath();
                graph.links.forEach(function (d) {
                    context.moveTo(d.source.x, d.source.y);
                    context.lineTo(d.target.x, d.target.y);
                });
                context.stroke();

                // draw nodes
                context.fillStyle = "steelblue";
                context.beginPath();
                graph.nodes.forEach(function (d) {
                    context.moveTo(d.x, d.y);
                    context.arc(d.x, d.y, nodeRadius, 0, 2 * Math.PI);
                    context.font = "12px Arial";
                    context.fillText(d.name, d.x + nodeRadius, d.y);
                });
                context.fill();
            }
        });

    </script>*@
