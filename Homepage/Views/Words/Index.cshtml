@using System.Text.RegularExpressions
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .big-list.big-list-collapsed ul {
        height: 100px;
        overflow: hidden;
    }

        .big-list.big-list-collapsed ul:after {
            content: "...";
        }

    .big-list-toggle {
        font-style: italic;
        cursor: pointer;
    }

        .big-list-toggle:after {
            content: "Show fewer";
        }

    div.big-list-collapsed .big-list-toggle:after {
        content: "... Show all";
    }
</style>


<div class="post-title">
    <div class="post-title-text">
        <h1>Words within words</h1>
    </div>
</div>

<div class="container">
<div class="row">
<div class="col-md-10 col-md-offset-1">
<p>
    I was interested in a question about words and letter replacement. If I take a word, such as <code>shoot</code>, can I remove a letter and still make a word?
    In this case, yes, of course: <code>hoot</code>. In fact, I can make three other words as well: <code>soot, shot, shoo</code>. So how many words do themselves contain words? And which word contains the most words within it?
</p>
<p>
    To answer these questions, we must decide on what counts as a 'word'. Do we include place names, proper nouns, etc.? Fortunately, <a href="https://en.wikipedia.org/wiki/Official_Scrabble_Players_Dictionary">someone else</a> has done their level best to answer that question, so I'll just take the so-known 'SOWPODS' English word list containing a total of 267,753 words.
</p>
<p>
The algorithm for this is remarkably simple:
<ul>
    <li>
        Go through every word in the dictionary:
        <ul>
            <li>
                Go through every letter in the word:
                <ul>
                    <li>
                        Remove that letter from the word, check if the result is in the dictionary
                        <ul>
                            <li>If it is, store it alongside the origin (parent) word</li>
                            <li>If it isn't, skip it</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<p>
    The code for this, and other questions, is available on <a href="https://github.com/mortenalbring/WordsWithinWords">GitHub</a>.
</p>
<p>
    The result of running this finds that 129,677 (48.43%) words in the English dictionary contain at least one other word, when removing one character. There are 339 (0.12%) words in this English dictionary where removing <em>any</em> character will give you a word.
</p>


<p>
    As for the word with the most number of words within it: there are four joint winners, each with 6 subwords



    @{
        var words = new List<string>
        {
            "dearns	 earns[d] darns[e] derns[a] deans[r] dears[n] dearn[s]",
            "heards	 eards[h] hards[e] herds[a] heads[r] hears[d] heard[s]",
            "spared	 pared[s] sared[p] spred[a] spaed[r] spard[e] spare[d]",
            "yeards	 eards[y] yards[e] yerds[a] yeads[r] years[d] yeard[s]"
        };

        @DisplayWordsWithinWords(words, "https://en.wiktionary.org/wiki/")
        ;
    }

</p>


<p>
    This does spit out some pretty peculiar words, such as '<a href="https://1word.ws/eards">eards</a>', '<a href="https://1word.ws/sared">sared</a>', and '<a href="https://1word.ws/yerds">yerds</a>'. No idea what they mean or why they're in this dictionary, but they are valid scrabble words.
</p>

<p>Of course, we can eschew the rules and regulations on the Official Scrabble word list and look at an even bigger word list. I've taken <a href="https://github.com/dwyl/english-words" target="_blank">this list</a>, combined it with any additional words in the SOWPODs list, resulting in a whopping word list of 548,420 English words. </p>

<p>Running the same analysis on this embiggened list finds 222,351 words (40.5%) containing at least one other word when a character is removed, and 8003 (1.46%) words when any character is removed.</p>

<p>
    The maximum number of words within a word is still at 6, though there are a few additional joint winners.
</p>

@{
    var words2 = new List<string>
    {
        "adread	 dread[a] aread[d] adead[r] adrad[e] adred[a] adrea[d]",
        "theins	 heins[t] teins[h] thins[e] thens[i] theis[n] thein[s]",
        "troads	 roads[t] toads[r] trads[o] trods[a] troas[d] troad[s]",
        "pearle	 earle[p] parle[e] perle[a] peale[r] peare[l] pearl[e]"
    };

    @DisplayWordsWithinWords(words2, "https://en.wiktionary.org/wiki/")
    ;
}


<p>
    We can of course run this for other languages, provided we can find comprehensive dictionaries in plain text form. This is surprisingly difficult.

    For Norwegian, the largest list I could find contains 692,872 words - though I cannot be sure it applies the same standards and rules as the scrabble dictionary.
</p>

<p>Running this list finds 347,760 (50.19 %) Norwegian words with other Norwegian words within them.</p>

<p>
    Norwegian also the most number of words within a word at 6, although here there's thirteen joint winners:

    <div id="big-list-1" class="big-list big-list-collapsed">

        @{
            var nwords = new List<string>
            {
                "baulte	 aulte[b] bulte[a] balte[u] baute[l] baule[t] bault[e]", "bauste	 auste[b] buste[a] baste[u] baute[s] bause[t] baust[e]", "gaulet	 aulet[g] gulet[a] galet[u] gauet[l] gault[e] gaule[t]", "greina	 reina[g] geina[r] grina[e] grena[i] greia[n] grein[a]", "greine	 reine[g] geine[r] grine[e] grene[i] greie[n] grein[e]", "greint	 reint[g] geint[r] grint[e] grent[i] greit[n] grein[t]", "meiste	 eiste[m] miste[e] meste[i] meite[s] meise[t] meist[e]", "paulte	 aulte[p] pulte[a] palte[u] paute[l] paule[t] pault[e]", "rauste	 auste[r] ruste[a] raste[u] raute[s] rause[t] raust[e]", "seigne	 eigne[s] signe[e] segne[i] seine[g] seige[n] seign[e]", "skurer	 kurer[s] surer[k] skrer[u] skuer[r] skurr[e] skure[r]", "steing	 teing[s] seing[t] sting[e] steng[i] steig[n] stein[g]", "veiken	 eiken[v] viken[e] veken[i] veien[k] veikn[e] veike[n]"
            };
            @DisplayWordsWithinWords(nwords, "https://no.wiktionary.org/wiki/")
        }


        <span class="big-list-toggle" onclick="document.getElementById('big-list-1').classList.toggle('big-list-collapsed');"></span>

    </div>
</p>

<p>
    This also spits up some pretty unusual words, though all I've checked do appear in some obscure word list or scrabble dictionary! It's interesting that the Norwegian list has some very long words, but the top number of words within a word is the same for English.
</p>

<table class="table">
    <thead>
    <tr>
        <th>Language</th>
        <th>Dictionary length</th>
        <th title="Number of words that have at least one word within it when removing one character" colspan="2">Words with any</th>
        <th title="Number of words that where removing any character will result in a word ">Words with all</th>
        <th>Most subwords</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>
            English (Scrabble)
        </td>
        <td>
            267,753
        </td>
        <td>
            129,677
        </td>
        <td>
            48.43%
        </td>
        <td>
            6
        </td>
    </tr>
    <tr>
        <td>
            English (Combined)
        </td>
        <td>
            548,420
        </td>
        <td>
            222,351
        </td>
        <td>
            8,003
        </td>
        <td>
            1.46%
        </td>
    </tr>

    <tr>
        <td>
            Norwegian
        </td>
        <td>
            692,872
        </td>
        <td>
            347,760
        </td>
        <td>
            50.19%
        </td>
        <td>
            6
        </td>
    </tr>
    <tr>
        <td>
            Danish
        </td>
        <td>
            23,516
        </td>
        <td>
            7,875
        </td>
        <td>
            33.48%
        </td>
        <td>
            3
        </td>
    </tr>
    <tr>
        <td>
            German
        </td>
        <td>
            165,995
        </td>
        <td>
            84,181
        </td>
        <td>
            50.71%
        </td>
        <td>
            4
        </td>
    </tr>

    <tr>
        <td>
            French
        </td>
        <td>
            208,914
        </td>
        <td>
            120,339
        </td>
        <td>
            57.60%
        </td>
        <td>
            6
        </td>
    </tr>

    <tr class="active">
        <td>
            Combined
        </td>
        <td>
            698,164
        </td>
        <td>
            372,160
        </td>
        <td>
            53.30%
        </td>
        <td>
            6
        </td>
    </tr>

    </tbody>
</table>


<p>I will update this table if I can find more comprehensive word lists for these languages.</p>
<p>The final row takes all of the other dictionaries and combines them together in one single list.</p>


<p>
    As an aside, a slight variation of this code can also find all words with the letters in alphabetical order. Of the 267,753 words in this English dictionary, 861 words contain all the letters in alphabetical order.

    The longest ones are 7 characters long:
    <br/>
    @{
        var alphabetWords = new List<string> {"addeems", "beefily", "billowy", "chikors", "dikkops", "gimmors"};
        @DisplayWordsInline(alphabetWords, "https://en.wiktionary.org/wiki/")
    }

    The 8 letter word 'aegilops' is often reported as the longest word with all letters in alphabetical order, but this is <a href="https://1word.ws/aegilops">not a valid scrabble word</a>.
</p>

<p>
    As an aside to the aside, we can also find the longest words with no repeating characters. There are two, each with 16 letters: @DisplayWordsInline(new List<string> {"dermatoglyphics", "uncopyrightable"}, "https://en.wiktionary.org/wiki/")
</p>

English:
@DisplayWordDistribution(new List<string>
{
    "1,27,0.004923243",
    "2,637,0.1161521",
    "3,4801,0.8754255",
    "4,11991,2.186467",
    "5,25491,4.648088",
    "6,44197,8.058984",
    "7,59657,10.878",
    "8,70355,12.8287",
    "9,72596,13.23732",
    "10,67451,12.29917",
    "11,57322,10.45223",
    "12,45900,8.369514",
    "13,34011,6.201645",
    "14,23654,4.313126",
    "15,15229,2.776891",
    "16,7119,1.298095",
    "17,3985,0.7266342",
    "18,2005,0.3655964",
    "19,1055,0.1923712",
    "20,506,0.09226522",
    "21,239,0.04357982",
    "22,103,0.01878126",
    "23,50,0.009117116",
    "24,19,0.003464504",
    "25,8,0.001458739",
    "26,2,0.0003646847",
    "27,3,0.000547027",
    "28,2,0.0003646847",
    "29,2,0.0003646847"
})
Norwegian:
@DisplayWordDistribution(new List<string>
{
    "1,5,0.000721634",
    "2,181,0.02612315",
    "3,1374,0.198305",
    "4,5816,0.8394047",
    "5,13816,1.994019",
    "6,27105,3.911978",
    "7,44818,6.468439",
    "8,65643,9.474044",
    "9,80645,11.63923",
    "10,83528,12.05533",
    "11,77103,11.12803",
    "12,61770,8.915067",
    "13,49740,7.178815",
    "14,40719,5.876843",
    "15,33066,4.77231",
    "16,29684,4.284197",
    "17,23320,3.365701",
    "18,17758,2.562955",
    "19,13080,1.887795",
    "20,8982,1.296343",
    "21,5944,0.8578785",
    "22,3811,0.5500295",
    "23,2309,0.3332506",
    "24,1284,0.1853156",
    "25,710,0.102472",
    "26,372,0.05368957",
    "27,165,0.02381392",
    "28,71,0.0102472",
    "29,28,0.004041151",
    "30,17,0.002453556",
    "31,5,0.000721634",
    "32,2,0.0002886536",
    "33,1,0.0001443268"
})


<hr/>

<p>This question of words within words led me to a related question. </p>
<ul>
    <li>Let's start with a word, and remove a character to make another word (as before). </li>
    <li>From this new word, see if we can remove a character and make yet another word</li>
    <li>Repeat for as long as possible</li>
</ul>
<br/>
For example:
@DisplayWordChain(new List<string> {"boarder", "borer", "bore", "ore"})


<p>
    But what is the longest chain we can make?
</p>


</div>

</div>

<strong>Resources:</strong>
<br/>
<ul>
    <li>
        <a href="https://daily.jstor.org/codifying-what-counts-as-a-word-in-scrabble/">Codifying What Counts as a Word in Scrabble</a>
    </li>

    <li>
        <a href="http://www.gwicks.net/dictionaries.htm">GWicks Dictionaries list</a>
    </li>

</ul>

</div>

@helper DisplayWordDistribution(List<string> lengths)
{
    <div width="100%" style="background: grey;">



        @foreach (var length in lengths)
        {
            var split = length.Split(',');

            var width = split[2] + "%";
            var height = "2em";
            var text = split[0] + " " + split[1];
            <div style="width: @width; height: @height; background: red">
                <small>
                    @text
                </small>

            </div>
        }

    </div>
}

@helper DisplayWordChain(List<string> wordChain)
{
    for (var i = 0; i < wordChain.Count(); i++)
    {
        <code>@wordChain[i]</code>

        if (i < wordChain.Count)
        {
            <span>→</span>
        }
    }
}

@helper DisplayWordsInline(IEnumerable<string> words, string urlPrefix)
{
    foreach (var word in words)
    {
        <code>
            <a href="@string.Concat(urlPrefix, word)">
                <span>@word.Trim()</span>
            </a>
        </code>
    }
}

@helper DisplayWordsWithinWords(IEnumerable<string> words, string urlPrefix)
{
    var n = 0;
    foreach (var word in words)
    {
        n++;

        var wordsSpl = word.Split(' ').ToList();
        var firstWord = wordsSpl[0];

        var pattern = @"\[(.*?)\]";

        var letters = new List<string>();
        var subwords = new List<string>();

        for (var i = 1; i < wordsSpl.Count; i++)
        {
            var match = Regex.Match(wordsSpl[i], pattern);
            if (match.Groups.Count > 0 && match.Value.Length > 0)
            {
                letters.Add(match.Groups[1].Value);
                var remword = wordsSpl[i].Replace(match.Value, "");
                subwords.Add(remword);
            }
            else
            {
                letters.Add("?");
                subwords.Add(wordsSpl[i]);
            }
        }

        <svg id="vis" width="960" height="600">

        </svg>


        <table class="table table-condensed table-bordered table-striped">
            <thead>
            <tr>
                <th colspan="@letters.Count">
                    <span>[@n]</span>
                    <a href="@string.Concat(urlPrefix, firstWord)">@firstWord</a>
                </th>
            </tr>
            </thead>
            <tbody>
            <tr>
                @foreach (var letter in letters)
                {
                    <td>
                        <span>
                            <code>
                                -@letter
                            </code>

                        </span>
                    </td>
                }
            </tr>
            <tr>
                @foreach (var subword in subwords)
                {
                    <td>
                        <span>
                            <a href="@string.Concat(urlPrefix, subword)">@subword</a>

                        </span>
                    </td>
                }
            </tr>
            </tbody>
        </table>
    }
}